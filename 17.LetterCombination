//LeetCode:

17. Letter Combinations of a Phone Number
Example 1:
Input: digits = "23"
Output: ["ad","ae","af","bd","be","bf","cd","ce","cf"]
Example 2:

Input: digits = ""
Output: []
Example 3:

Input: digits = "2"
Output: ["a","b","c"]
 
 //////////////////////////Solutions/////////////
 First Try:
 class Solution {
    public List<String> letterCombinations(String digits) {

       List<String> result = new ArrayList<>();
        if (digits == null || digits.length() == 0) {
            return result;
        }

        // Create a map to store digit-to-letter mappings
        Map<Character, char[]> digitToLetters = new HashMap<>();
        digitToLetters.put('2', new char[]{'a', 'b', 'c'});
        digitToLetters.put('3', new char[]{'d', 'e', 'f'});
        digitToLetters.put('4', new char[]{'g', 'h', 'i'});
        digitToLetters.put('5', new char[]{'j', 'k', 'l'});
        digitToLetters.put('6', new char[]{'m', 'n', 'o'});
        digitToLetters.put('7', new char[]{'p', 'q', 'r', 's'});
        digitToLetters.put('8', new char[]{'t', 'u', 'v'});
        digitToLetters.put('9', new char[]{'w', 'x', 'y', 'z'});

        // Use a queue to build combinations iteratively
        Queue<String> queue = new LinkedList<>();
        queue.offer("");

        for (int i = 0; i < digits.length(); i++) {
            char digit = digits.charAt(i);
            int size = queue.size();

            while (size-- > 0) {
                String current = queue.poll();
                for (char c : digitToLetters.get(digit)) {
                    queue.offer(current + c);
                }
            }
        }

        // Convert queue to list and return
        result.addAll(queue);
        return result;

    }
}

///Second Try